/*
|--------------------------------------------------------------------------
| api.js -- server routes
|--------------------------------------------------------------------------
|
| This file defines the routes for your server.
|
*/

const express = require("express");

// import models so we can interact with the database
const User = require("./models/user");
const Comment = require("./models/comment");
const Exercise = require("./models/exercise");
const Workout = require("./models/workout");
const Like = require("./models/like");
const Star = require("./models/star");

// import authentication library
const auth = require("./auth");

// api endpoints: all these paths will be prefixed with "/api/"
const router = express.Router();

//initialize socket
const socketManager = require("./server-socket");

router.post("/login", auth.login);
router.post("/logout", auth.logout);
router.get("/whoami", (req, res) => {
  if (!req.user) {
    // not logged in
    return res.send({});
  }

  res.send(req.user);
});

router.post("/initsocket", (req, res) => {
  // do nothing if user not logged in
  if (req.user)
    socketManager.addUser(req.user, socketManager.getSocketFromSocketID(req.body.socketid));
  res.send({});
});

// |------------------------------|
// | write your API methods below!|
// |------------------------------|

router.get("/workout/current", (req, res) => {
  console.log(req.query);
  Workout.find({ creator_id: req.query.userId, current: true }).then((workout) => {
    res.send(workout);
  });
});

router.post("/workout/create", (req, res) => {
  console.log(req.body);
  const newWorkout = new Workout({
    creator_id: req.user._id,
    creator_name: req.user.name,
    current: req.body.current,
  });
  newWorkout.save().then((workout) => {
    res.send(workout);
  });
});

router.post("/workout/save", (req, res) => {
  console.log(`IN API ${req.body.id}`);
  Workout.findById(req.body.id).then((workout) => {
    workout.posted = false;
    workout.current = false;
    workout.save(res.send(workout));
  });
});

router.post("/workout/post", (req, res) => {
  Workout.findById(req.body.id).then((workout) => {
    workout.posted = true;
    workout.current = false;
    workout.save(res.send(workout));
  });
});

router.get("/workouts/feed", (req, res) => {
  Workout.find({ posted: true }).then((workouts) => res.send(workouts));
});

router.get("/workouts/profile", (req, res) => {
  Workout.find({ creator_id: req.user._id, current: false }).then((workouts) => res.send(workouts));
});

router.get("/exercises/year", (req, res) => {
  let dateToCompare = new Date();
  dateToCompare.setFullYear(dateToCompare.getFullYear() - 1);
  console.log(`The date is ${dateToCompare}`);
  Exercise.find({ creator_id: req.query.creator_id })
    .then((exercises) => {
      console.log(`Exercises found: ${exercises}`);
      res.send(exercises);
    })
    .catch((err) => {
      console.error("Error during query:", err);
    });
});

router.get("/exercises", (req, res) => {
  Exercise.find({ parent: req.query.parent }).then((exercises) => res.send(exercises));
});

router.get("/exercise", (req, res) => {
  Exercise.findById(req.query.id).then((exercise) => res.send(exercise));
});

router.post("/exercise/create", (req, res) => {
  const newExercise = new Exercise({
    creator_id: req.body.creator_id,
    parent: req.body.workoutId,
  });
  newExercise.save().then((exercise) => {
    console.log("Exercise created");
    res.send(exercise);
  });
});

router.post("/exercise/delete", (req, res) => {
  Exercise.deleteOne({ _id: req.body.exerciseId }).then((exercise) => {
    res.send(exercise);
  });
});

router.post("/exercise/update", (req, res) => {
  Exercise.findById(req.body.id).then((exercise) => {
    exercise.name = req.body.name;
    exercise.sets = req.body.sets;
    exercise.save().then(res.send(exercise));
  });
});

router.get("/exercise/name", (req, res) => {
  Exercise.findById(req.query.id).then((exercise) => {
    res.send(exercise);
  });
});

router.post("/comment", (req, res) => {
  const newComment = new Comment({
    creator_id: req.user._id,
    creator_name: req.user.name,
    parent: req.body.parent, // links to the _id of a parent workout (_id is an autogenerated field by Mongoose).
    content: req.body.content,
  });
  newComment.save().then((comment) => {
    res.send(comment);
  });
});

router.get("/comments", (req, res) => {
  Comment.find({ parent: req.query.parent }).then((comments) => res.send(comments));
});

router.post("/like", (req, res) => {
  if (req.body.isLiked) {
    const like = new Like({
      userId: req.user._id,
      workoutId: req.body.workoutId,
    });
    like.save().then((like) => console.log("like saved"));
  } else {
    Like.deleteOne({
      userId: req.user._id,
      workoutId: req.body.workoutId,
    }).then(() => console.log("like deleted"));
  }
});

router.get("/like", (req, res) => {
  Like.find({ userId: req.query.userId, workoutId: req.query.workoutId }).then((like) => {
    res.send(like);
  });
});

router.post("/star", (req, res) => {
  if (req.body.isStarred) {
    const star = new Star({
      userId: req.user._id,
      workoutId: req.body.workoutId,
    });
    star.save().then((star) => console.log("Star saved"));
  } else {
    Star.deleteOne({
      userId: req.user._id,
      workoutId: req.body.workoutId,
    }).then(() => console.log("Star deleted"));
  }
});

router.get("/star", (req, res) => {
  Star.find({ userId: req.query.userId, workoutId: req.query.workoutId }).then((star) => {
    res.send(star);
  });
});

router.get("/nukedb", (req, res) => {
  User.deleteMany({}).then((comments) => {});
});

/* router.post("/user/update", (req, res) => {
  console.log(req.body.bio);
  User.findById(req.body.id).then((user) => {
    user.name = req.body.name;
    user.bio = req.body.bio;
    user.save().then((user) => res.send(user));
  });
}); */

router.get("/user/info", (req, res) => {
  User.findById(req.query.id).then((user) => res.send(user));
});

// anything else falls to this "not found" case
router.all("*", (req, res) => {
  console.log(`API route not found: ${req.method} ${req.url}`);
  res.status(404).send({ msg: "API route not found" });
});

module.exports = router;
